<<<<<<< HEAD
import numpy as np
from typing import Any

memmap_obj: np.memmap[Any, np.dtype[np.str_]]

reveal_type(np.memmap.__array_priority__)  # E: float
reveal_type(memmap_obj.__array_priority__)  # E: float
reveal_type(memmap_obj.filename)  # E: Union[builtins.str, None]
reveal_type(memmap_obj.offset)  # E: int
reveal_type(memmap_obj.mode)  # E: str
reveal_type(memmap_obj.flush())  # E: None

reveal_type(np.memmap("file.txt", offset=5))  # E: memmap[Any, dtype[{uint8}]]
reveal_type(np.memmap(b"file.txt", dtype=np.float64, shape=(10, 3)))  # E: memmap[Any, dtype[{float64}]]
with open("file.txt", "rb") as f:
    reveal_type(np.memmap(f, dtype=float, order="K"))  # E: memmap[Any, dtype[Any]]

reveal_type(memmap_obj.__array_finalize__(object()))  # E: None
=======
import sys
from typing import Any

import numpy as np

if sys.version_info >= (3, 11):
    from typing import assert_type
else:
    from typing_extensions import assert_type

memmap_obj: np.memmap[Any, np.dtype[np.str_]]

assert_type(np.memmap.__array_priority__, float)
assert_type(memmap_obj.__array_priority__, float)
assert_type(memmap_obj.filename, str | None)
assert_type(memmap_obj.offset, int)
assert_type(memmap_obj.mode, str)
assert_type(memmap_obj.flush(), None)

assert_type(np.memmap("file.txt", offset=5), np.memmap[Any, np.dtype[np.uint8]])
assert_type(np.memmap(b"file.txt", dtype=np.float64, shape=(10, 3)), np.memmap[Any, np.dtype[np.float64]])
with open("file.txt", "rb") as f:
    assert_type(np.memmap(f, dtype=float, order="K"), np.memmap[Any, np.dtype[Any]])

assert_type(memmap_obj.__array_finalize__(object()), None)
>>>>>>> scraper
